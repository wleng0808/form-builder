{
  "name": "location-input",
  "type": "registry:ui",
  "registryDependencies": [
    "button",
    "popover",
    "scroll-area",
    "command"
  ],
  "files": [
    {
      "type": "registry:ui",
      "content": "import React, { useState } from 'react'\nimport { Check, ChevronsUpDown } from 'lucide-react'\nimport { Button } from '@/components/ui/button'\nimport { ScrollArea, ScrollBar } from '@/components/ui/scroll-area'\nimport {\n  Command,\n  CommandList,\n  CommandEmpty,\n  CommandGroup,\n  CommandInput,\n  CommandItem,\n} from '@/components/ui/command'\nimport {\n  Popover,\n  PopoverContent,\n  PopoverTrigger,\n} from '@/components/ui/popover'\nimport { cn } from '@/lib/utils'\n\n// Import JSON data directly\nimport countries from '@/data/countries.json'\nimport states from '@/data/states.json'\n\ninterface Timezone {\n  zoneName: string\n  gmtOffset: number\n  gmtOffsetName: string\n  abbreviation: string\n  tzName: string\n}\n\ninterface CountryProps {\n  id: number\n  name: string\n  iso3: string\n  iso2: string\n  numeric_code: string\n  phone_code: string\n  capital: string\n  currency: string\n  currency_name: string\n  currency_symbol: string\n  tld: string\n  native: string\n  region: string\n  region_id: string\n  subregion: string\n  subregion_id: string\n  nationality: string\n  timezones: Timezone[]\n  translations: Record<string, string>\n  latitude: string\n  longitude: string\n  emoji: string\n  emojiU: string\n}\n\ninterface StateProps {\n  id: number\n  name: string\n  country_id: number\n  country_code: string\n  country_name: string\n  state_code: string\n  type: string | null\n  latitude: string\n  longitude: string\n}\n\ninterface LocationSelectorProps {\n  disabled?: boolean\n  onCountryChange?: (country: CountryProps | null) => void\n  onStateChange?: (state: StateProps | null) => void\n}\n\nconst LocationSelector = ({\n  disabled,\n  onCountryChange,\n  onStateChange,\n}: LocationSelectorProps) => {\n  const [selectedCountry, setSelectedCountry] = useState<CountryProps | null>(\n    null,\n  )\n  const [selectedState, setSelectedState] = useState<StateProps | null>(null)\n  const [openCountryDropdown, setOpenCountryDropdown] = useState(false)\n  const [openStateDropdown, setOpenStateDropdown] = useState(false)\n\n  // Cast imported JSON data to their respective types\n  const countriesData = countries as CountryProps[]\n  const statesData = states as StateProps[]\n\n  // Filter states for selected country\n  const availableStates = statesData.filter(\n    (state) => state.country_id === selectedCountry?.id,\n  )\n\n  const handleCountrySelect = (country: CountryProps | null) => {\n    setSelectedCountry(country)\n    setSelectedState(null) // Reset state when country changes\n    onCountryChange?.(country)\n    onStateChange?.(null)\n  }\n\n  const handleStateSelect = (state: StateProps | null) => {\n    setSelectedState(state)\n    onStateChange?.(state)\n  }\n\n  return (\n    <div className=\"flex gap-4\">\n      {/* Country Selector */}\n      <Popover open={openCountryDropdown} onOpenChange={setOpenCountryDropdown}>\n        <PopoverTrigger asChild>\n          <Button\n            variant=\"outline\"\n            role=\"combobox\"\n            aria-expanded={openCountryDropdown}\n            disabled={disabled}\n            className=\"w-full justify-between\"\n          >\n            {selectedCountry ? (\n              <div className=\"flex items-center gap-2\">\n                <span>{selectedCountry.emoji}</span>\n                <span>{selectedCountry.name}</span>\n              </div>\n            ) : (\n              <span>Select Country...</span>\n            )}\n            <ChevronsUpDown className=\"h-4 w-4 shrink-0 opacity-50\" />\n          </Button>\n        </PopoverTrigger>\n        <PopoverContent className=\"w-[300px] p-0\">\n          <Command>\n            <CommandInput placeholder=\"Search country...\" />\n            <CommandList>\n              <CommandEmpty>No country found.</CommandEmpty>\n              <CommandGroup>\n                <ScrollArea className=\"h-[300px]\">\n                  {countriesData.map((country) => (\n                    <CommandItem\n                      key={country.id}\n                      value={country.name}\n                      onSelect={() => {\n                        handleCountrySelect(country)\n                        setOpenCountryDropdown(false)\n                      }}\n                      className=\"flex cursor-pointer items-center justify-between text-sm\"\n                    >\n                      <div className=\"flex items-center gap-2\">\n                        <span>{country.emoji}</span>\n                        <span>{country.name}</span>\n                      </div>\n                      <Check\n                        className={cn(\n                          'h-4 w-4',\n                          selectedCountry?.id === country.id\n                            ? 'opacity-100'\n                            : 'opacity-0',\n                        )}\n                      />\n                    </CommandItem>\n                  ))}\n                  <ScrollBar orientation=\"vertical\" />\n                </ScrollArea>\n              </CommandGroup>\n            </CommandList>\n          </Command>\n        </PopoverContent>\n      </Popover>\n\n      {/* State Selector - Only shown if selected country has states */}\n      {availableStates.length > 0 && (\n        <Popover open={openStateDropdown} onOpenChange={setOpenStateDropdown}>\n          <PopoverTrigger asChild>\n            <Button\n              variant=\"outline\"\n              role=\"combobox\"\n              aria-expanded={openStateDropdown}\n              disabled={!selectedCountry}\n              className=\"w-full justify-between\"\n            >\n              {selectedState ? (\n                <span>{selectedState.name}</span>\n              ) : (\n                <span>Select State...</span>\n              )}\n              <ChevronsUpDown className=\"h-4 w-4 shrink-0 opacity-50\" />\n            </Button>\n          </PopoverTrigger>\n          <PopoverContent className=\"w-[300px] p-0\">\n            <Command>\n              <CommandInput placeholder=\"Search state...\" />\n              <CommandList>\n                <CommandEmpty>No state found.</CommandEmpty>\n                <CommandGroup>\n                  <ScrollArea className=\"h-[300px]\">\n                    {availableStates.map((state) => (\n                      <CommandItem\n                        key={state.id}\n                        value={state.name}\n                        onSelect={() => {\n                          handleStateSelect(state)\n                          setOpenStateDropdown(false)\n                        }}\n                        className=\"flex cursor-pointer items-center justify-between text-sm\"\n                      >\n                        <span>{state.name}</span>\n                        <Check\n                          className={cn(\n                            'h-4 w-4',\n                            selectedState?.id === state.id\n                              ? 'opacity-100'\n                              : 'opacity-0',\n                          )}\n                        />\n                      </CommandItem>\n                    ))}\n                    <ScrollBar orientation=\"vertical\" />\n                  </ScrollArea>\n                </CommandGroup>\n              </CommandList>\n            </Command>\n          </PopoverContent>\n        </Popover>\n      )}\n    </div>\n  )\n}\n\nexport default LocationSelector\n",
      "path": "ui/location-input.tsx",
      "target": "components/ui/location-input.tsx"
    }
  ]
}